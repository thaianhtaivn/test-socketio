{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","socket","App","props","state","endpoint","counter","activecounter","greeting","status","SelectCounter","bind","handle_Button","socketIOClient","on","data","console","log","emit","this","evt","setState","className","Dropdown","onSelect","Toggle","variant","id","Menu","map","Item","eventKey","src","logo","onClick","alt","href","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,4ICMvCC,E,4IA+EWC,E,kDA7Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTC,SAAU,iBACVC,QAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAC/BC,cAAc,EACdC,SAAS,QACTC,OAAO,QAET,EAAKC,cAAc,EAAKA,cAAcC,KAAnB,gBACnB,EAAKC,cAAc,EAAKA,cAAcD,KAAnB,gBACnBV,EAASY,IAAe,EAAKT,MAAMC,UAXnB,E,iEAaG,IAAD,OAClBJ,EAAOa,GAAG,WAAW,WACnBb,EAAOa,GAAG,mBAAkB,SAASC,GAEnCC,QAAQC,IAAIF,MAGdd,EAAOiB,KAAK,iBAAiB,EAAKd,MAAMG,oB,0CAI1CN,EAAOa,GAAG,UAAS,SAASC,GAC1BC,QAAQC,IAAI,eAAeF,Q,sCAK7Bd,EAAOiB,KAAK,mBAAmB,WAAWC,KAAKf,MAAMG,cAAc,W,oCAKvDa,GACZD,KAAKE,SAAS,CAACd,cAAea,IAC9BnB,EAAOiB,KAAK,mBAAoB,QAAQC,KAAKf,MAAMG,iB,+BAInD,OACE,yBAAKe,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAACC,EAAA,EAAD,CAAUC,SAAUL,KAAKT,eACvB,kBAACa,EAAA,EAASE,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBAAtC,mBACmBR,KAAKf,MAAMG,eAE9B,kBAACgB,EAAA,EAASK,KAAV,KACGT,KAAKf,MAAME,QAAQuB,KAAK,SAACF,GAAD,OACvB,kBAACJ,EAAA,EAASO,KAAV,CAAeC,SAAUJ,GACtBA,QAMT,4BACE,yBAAKK,IAAKC,IAAMC,QAASf,KAAKP,cAAeU,UAAU,WAAWa,IAAI,SACtE,mCACO,4CADP,wBAGA,uBACEb,UAAU,WACVc,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,qB,GA/DQC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.0bcba465.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport socketIOClient from \"socket.io-client\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Dropdown, DropdownMenu} from 'react-bootstrap';\nvar socket;\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      endpoint: \"localhost:1234\",\n      counter: [1,2,3,4,5,6,7,8,9,10,11],\n      activecounter:1,\n      greeting:'HELLO',\n      status:\"fail\"\n    };\n    this.SelectCounter=this.SelectCounter.bind(this)\n    this.handle_Button=this.handle_Button.bind(this)\n    socket = socketIOClient(this.state.endpoint);\n  }\n  componentWillMount(){\n    socket.on('connect', () => {\n      socket.on('Server-greeting',function(data){\n        // <h3>Server connected!</h3>\n        console.log(data);\n\n      })\n      socket.emit(\"Client-counter\",this.state.activecounter)\n    });\n  }\n  componentDidMount(){\n    socket.on(\"Update\",function(data){\n      console.log(\"Sever said: \"+data);\n    })\n\n  }\n  handle_Button(){\n    socket.emit(\"Client-send-data\",\"Client: \"+this.state.activecounter+\" Rate\");\n    // socket.on(\"Update\",function(data){\n    //   console.log(data);\n    // })\n  }\n  SelectCounter(evt){\n    this.setState({activecounter: evt});\n    socket.emit(\"Client-send-data\", \"New: \"+this.state.activecounter)\n  }\n  render(){\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <Dropdown onSelect={this.SelectCounter} >\n          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" >\n            Choose Counter: {this.state.activecounter}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            {this.state.counter.map( (id) =>(\n              <Dropdown.Item eventKey={id} >\n                {id}\n              </Dropdown.Item>\n              )\n            )}\n          </Dropdown.Menu>\n        </Dropdown>\n        <p></p>\n          <img src={logo} onClick={this.handle_Button} className=\"App-logo\" alt=\"logo\" />\n          <p >\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}